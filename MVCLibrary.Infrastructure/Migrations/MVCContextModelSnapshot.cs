// <auto-generated />
using System;
using MVCLibrary.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVCLibrary.Infrastructure.Migrations
{
    [DbContext(typeof(MVCContext))]
    partial class MVCContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MVCLibrary.Data.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Book__3214EC07F8E418B9");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("MVCLibrary.Data.BookDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<byte?>("CountEdition")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime?>("PublishDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__BookDeta__3214EC07EC11CE0C");

                    b.HasIndex("BookId");

                    b.ToTable("BookDetail", (string)null);
                });

            modelBuilder.Entity("MVCLibrary.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id")
                        .HasName("PK__Category__3214EC0708EE70E5");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("MVCLibrary.Data.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__City__3214EC07F8E418B9");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("MVCLibrary.Data.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("FCityId")
                        .HasColumnType("int");

                    b.Property<short>("LibraryNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Library__3214EC07853ADEDD");

                    b.HasIndex("CityId");

                    b.ToTable("Library", (string)null);
                });

            modelBuilder.Entity("MVCLibrary.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MVCLibrary.Data.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("userRole");
                });

            modelBuilder.Entity("MVCLibrary.Data.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"));

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ProvinceId")
                        .HasName("PK__Province__3214EC07853ADEDD");

                    b.ToTable("Province", (string)null);
                });

            modelBuilder.Entity("MVCLibrary.Data.Book", b =>
                {
                    b.HasOne("MVCLibrary.Data.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("Category_Book_FK");

                    b.HasOne("MVCLibrary.Data.Library", "Library")
                        .WithMany("Books")
                        .HasForeignKey("LibraryId")
                        .IsRequired()
                        .HasConstraintName("Library_Book_FK");

                    b.Navigation("Category");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("MVCLibrary.Data.BookDetail", b =>
                {
                    b.HasOne("MVCLibrary.Data.Book", "Book")
                        .WithMany("BookDetails")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("Book_BookDetail_FK");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("MVCLibrary.Data.City", b =>
                {
                    b.HasOne("MVCLibrary.Data.Province", "Province")
                        .WithMany("Citys")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("Province_Book_FK");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("MVCLibrary.Data.Library", b =>
                {
                    b.HasOne("MVCLibrary.Data.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("MVCLibrary.Data.Models.User", b =>
                {
                    b.HasOne("MVCLibrary.Data.Models.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("MVCLibrary.Data.Book", b =>
                {
                    b.Navigation("BookDetails");
                });

            modelBuilder.Entity("MVCLibrary.Data.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("MVCLibrary.Data.Library", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("MVCLibrary.Data.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MVCLibrary.Data.Province", b =>
                {
                    b.Navigation("Citys");
                });
#pragma warning restore 612, 618
        }
    }
}
